#!groovyâ€‹

pipeline {
agent {
  kubernetes {
    label 'mrm-slack-integration'
    defaultContainer 'jnlp'
    yaml """
      apiVersion: v1
      kind: Pod
      metadata:
        name: mrm-slack-integration-pod
      labels:
        component: ci
      spec:
        containers:
        - name: mrm-slack-integration
          image: ${IMAGE_REGISTRY}/${MRM_IMAGE_DIR}/${MRM_SLACK_BOT_IMAGE}
          resources:
            requests:
              cpu: "2000m"
              memory: "2Gi"
            limits:
              cpu: "2000m"
              memory: "2Gi"
          command:
          - cat
          tty: true
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
        - name: dind
          image: docker:18.05-dind
          securityContext:
            privileged: true
          volumeMounts:
            - name: dind-storage
              mountPath: /var/lib/docker
        volumes:
        - name: dind-storage
          emptyDir: {}
    """
    }
  }

  stages {
    stage('setup-development-environment') {
      steps {
        container('mrm-slack-integration') {
          withCredentials([
            file(credentialsId: 'mrm-slack-integration-env-vars', variable: 'MRM_SLACK_INTEGRATION')
          ]) {
            load "${MRM_SLACK_INTEGRATION}"
          }
          // Create the application's virtual environment
          sh script: "virtualenv venv", label: "Create the application's virtual environment"
          // Make bash scripts in jenkins/bin executable
          sh script: "chmod +x jenkins/scripts/*.sh", label: "Make bash scripts executable"
          // Load environment variables
          sh script: "$WORKSPACE/jenkins/scripts/load_env_variables.sh", label: "Load environment variables"
          // Activate the virtual environment
          sh script: "$WORKSPACE/jenkins/scripts/source_venv.sh", label: "Activate the virtual environment"
        }
      }
    }

    stage('install-project-dependencies') {
      steps {
        container('mrm-slack-integration') {
          // Install dependencies
          sh script: "pip3 install -r requirements.txt", label: "Install app dependencies"
        }
      }
    }

    stage('run-test') {
      steps {
        container('mrm-slack-integration') {
          // Install Flask-Testing
          sh script: "pip3 install Flask-Testing", label: "Install Flask-Testing"
          // Run test
          sh script: "pytest -v --cov", label: "Run test"
        }
      }
      post {
        success {
          container('mrm-slack-integration') {
            // Send success notification to slack if test stage is successful
            sh script: "$WORKSPACE/jenkins/scripts/notify_slack.sh success", label: "Notifying slack channel (succeeded)"
          }
        }
        failure {
          container('mrm-slack-integration') {
            // Send failure notification to slack if test stage fails
            sh script: "$WORKSPACE/jenkins/scripts/notify_slack.sh fail", label: "Notifying slack channel (failed)"
          }
        }
      }
    }

    stage('build-deployment-image') {
      // Run this stage only when GIT_BRANCH is master, develop, or
      when {
        anyOf {
          branch 'master'
          branch 'develop'
        }
      }
      steps {
        container('mrm-slack-integration') {
          // authenticate gcloud in the container
          sh script: "$WORKSPACE/jenkins/scripts/auth_gcloud.sh", label: "gcloud authentication"
          // Build deployment docker image
          sh script: "$WORKSPACE/jenkins/scripts/build_docker_image.sh", label: "Build deployment docker image"
        }
      }
      post {
        success {
          container('mrm-slack-integration') {
            // Send success notification to slack if test stage is successful
            sh script: "$WORKSPACE/jenkins/scripts/notify_slack.sh success", label: "Notifying slack channel (succeeded)"
          }
        }
        failure {
          container('mrm-slack-integration') {
            // Send failure notification to slack if test stage fails
            sh script: "$WORKSPACE/jenkins/scripts/notify_slack.sh fail", label: "Notifying slack channel (failed)"
          }
        }
      }
    }

    stage('deploy-to-GKE') {
      // Run this stage only when GIT_BRANCH is master, develop, or
      when {
        anyOf {
          branch 'master'
          branch 'develop'
        }
      }
      steps {
        container('mrm-slack-integration') {
          // Deploy to kubernetes
          sh script: "$WORKSPACE/jenkins/scripts/deploy_to_k8s.sh", label: "Deploy to kubernetes"
        }
      }
      post {
        success {
          container('mrm-slack-integration') {
            // Send success notification to slack if test stage is successful
            sh script: "$WORKSPACE/jenkins/scripts/notify_slack.sh success", label: "Notifying slack channel (succeeded)"
          }
        }
        failure {
          container('mrm-slack-integration') {
            // Send failure notification to slack if test stage fails
            sh script: "$WORKSPACE/jenkins/scripts/notify_slack.sh fail", label: "Notifying slack channel (failed)"
          }
        }
      }
    }
  }
}
